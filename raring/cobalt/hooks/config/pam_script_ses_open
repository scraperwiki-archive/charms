#!/bin/bash

# We use (bash-specific) ERR trap instead of set -e,
# so that we can log an error to syslog. (see help trap on bash
# for details of ERR trap).
# set -e

function error_exit() {
  log "$1:$2 failed, exit status $?"
  exit 1
}
# Note that this trap is not used inside functions, and
# make_mount() relies on this.
trap 'error_exit "${BASH_SOURCE}" "${LINENO}"' ERR

LOG=/var/log/pam_script.log

function log() {
  logger --priority auth.info --tag "$0" "$@"
  echo "$(date) $0: $@" >> $LOG
}

log "$PAM_USER login"

# Check we're running as a databox (primary group), we don't want to accidentally
# put our terminal into a cgroup (or create mounts that are meaningless)
groups=$(id -Gn "$PAM_USER")
case $groups in
  *databox*)
    ;;
  *)
    log "$PAM_USER ignored"
    exit 0
    ;;
esac

# Check that our mount namespace is different from the one that the system
# init lives in. (did unshare() work?)
if [[ "$(readlink /proc/1/ns/mnt)" == "$(readlink /proc/self/ns/mnt)" ]]; then
  log "ERROR, databox not in mount namespace: $(readlink /proc/self/ns/mnt)"
  exit 1
fi

mkdir -p /jails/$PAM_USER > /dev/null 2>&1

if which cgcreate 1> /dev/null 2>&1
then
  # Total limit over all processes in the cgroup
  MemoryLimit=$((512*1024*1024))

  if [ ! -d /sys/fs/cgroup/cpu/$PAM_USER ]
  then
    cgcreate -t $PAM_USER -g memory,cpu,cpuacct:$PAM_USER
  fi

  echo $MemoryLimit > /sys/fs/cgroup/memory/$PAM_USER/memory.limit_in_bytes

  # CPU share is form of priority. By specifying a low number here, we
  # ensure that important system services get a higher share of the CPU
  # and thus remain responsive.
  Priority=12
  echo $Priority > /sys/fs/cgroup/cpu/$PAM_USER/cpu.shares

  # 13/07/30 Peter and Chris thought about this and decided that it isn't
  # desirable. It may turn out to be useful later, but not set in this manner.

  # CpuTime=100000
  # CpuPeriod=100000
  # echo $CpuPeriod > /sys/fs/cgroup/cpu/$PAM_USER/cpu.cfs_period_us
  # echo $CpuTime > /sys/fs/cgroup/cpu/$PAM_USER/cpu.cfs_quota_us

  # Put the owning process (usually the "su -l" or cron child process)
  # into the cgroup (and therefore all of its future children)
  echo $PPID > /sys/fs/cgroup/cpu/$PAM_USER/tasks
  echo $PPID > /sys/fs/cgroup/memory/$PAM_USER/tasks
  echo $PPID > /sys/fs/cgroup/cpuacct/$PAM_USER/tasks
fi

make_bind_mount () {
  DEST="$2"
  mkdir -p "$DEST"
  OUTPUT="$(mount --no-mtab --bind "$@" 2>&1)"
  STATUS=$?
  if [ ! -z "$OUTPUT" ] || [ $STATUS != 0 ]
  then
    log "unexpected error (status $STATUS) mounting $@: output: '$OUTPUT'"
    exit 1
  fi
}

JAILPATH="/jails/$PAM_USER"

make_bind_mount /opt/basejail             ${JAILPATH}
make_bind_mount /var/spool/cron/crontabs  ${JAILPATH}/var/spool/cron/crontabs
make_bind_mount /ebs/home/$PAM_USER       ${JAILPATH}/home
make_bind_mount /dev                      ${JAILPATH}/dev
make_bind_mount /dev/pts                  ${JAILPATH}/dev/pts
make_bind_mount /proc                     ${JAILPATH}/proc
